#!/usr/bin/perl -w
#
# net_udp - Munin plugin for graphing UDP queue and drops
# Copyright (C) 2019 CESNET, z.s.p.o.
#
# Author: Jan Tomášek <jan@tomasek.cz>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

use strict;
use warnings;
use Data::Dumper;

my $file = '/proc/net/udp';

my $items = {
	     tx_queue => {
			  index => 6,
			  name  => 'Transmit Queue',
			  type  => 'DERIVE',
			  draw  => 'LINE1',
			  min   => 0,
			 },
	     rx_queue => {
			  index => 7,
			  name  => 'Receive Queue',
			  type  => 'DERIVE',
			  draw  => 'LINE1',
			  min   => 0,
			 },
	     drops   => {
			 index => 16,
			 name  => 'Drops',
			 type  => 'DERIVE',
			 draw  => 'LINE1',
			 min   => 0,
			},
	    };
my $totals = { map {$_ => 0} keys %{$items}};


if ( defined($ARGV[0]) and $ARGV[0] eq 'config' ) {
  print "graph_title UDP queue sizes and drops
graph_vlabel packets per second
graph_category network\n";
  foreach my $item (sort keys %{$items}) {
    print "$item.label ".$items->{$item}->{name}."\n";
    print "$item.type ". $items->{$item}->{type}."\n";
    print "$item.min ".  $items->{$item}->{min}."\n";
  };
  exit;
};

open(NU, "<$file") or die "Failed to read from $file: $?";
while (my $line = <NU>) {
  chomp ($line);
  $line =~ s/:/ /g;
  $line =~ s/\s{1,}/ /g;
  $line =~ s/^\s//g;

  next if ($line =~ /^sl/);

  my @line = split(/ /, $line);
  my $non_zero = 0;
  foreach my $item (keys %{$items}) {
    my $item_value = $line[$items->{$item}->{index}];
    $totals->{$item} += $item_value;
    $non_zero += $item_value;
  };

  if ($non_zero) {
    # TODO debug to syslog?
  };
};

foreach my $item (sort keys %{$items}) {
  print "$item.value ".$totals->{$item}."\n";
};
